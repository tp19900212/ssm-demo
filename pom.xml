<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.tp</groupId>
    <artifactId>ssm-demo</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>ssm-demo</name>

    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <jstl-version>1.2</jstl-version>
        <standard-version>1.1.2</standard-version>
        <lombok-veresion>1.18.4</lombok-veresion>
        <druid-version>1.1.21</druid-version>
        <spring-version>5.2.2.RELEASE</spring-version>
        <aopalliance-version>1.0</aopalliance-version>
        <jackson-mapper-version>1.9.13</jackson-mapper-version>
        <jackson-core-version>2.10.1</jackson-core-version>
        <jackson-annotations-version>2.10.1</jackson-annotations-version>
        <jackson-databind-version>2.10.1</jackson-databind-version>
        <mysql-version>8.0.13</mysql-version>
        <mybatis-version>3.5.3</mybatis-version>
        <mybatis-spring-version>2.0.3</mybatis-spring-version>
        <pagehelper-version>5.1.11</pagehelper-version>
        <mybatis-paginator-version>1.2.17</mybatis-paginator-version>
        <mybatis-generator-core-version>1.3.7</mybatis-generator-core-version>
    </properties>

    <dependencies>
        <!--servlet相关，作用域应该设置为provided防止和容器冲突(tomcat等web服务器已经存在了)-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <!--在编译和测试的过程有效，最后生成war包时不会加入-->
            <scope>provided</scope>
        </dependency>

        <!--jsp相关-->
        <!-- 作用域应该设置为provided防止和容器冲突(tomcat等web服务器已经存在了) -->
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.2</version>
            <scope>provided</scope>
        </dependency>
        <!--jsp使用C标签库-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl-version}</version>
        </dependency>
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>standard</artifactId>
            <version>${standard-version}</version>
        </dependency>

        <!--Spring相关-->
        <!--Spring提供在基础IoC功能上的扩展业务，
            此外还提供许多企业级服务的支持，如邮件服务，任务调度，JNDI定位，EJB集成，远程访问，缓存以及各种视图层框架封装等-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <!--Spring-context的扩展支持，用于MVC方面-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <!--Spring的面向切面编程，提供AOP(面向切面编程)实现。-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <!--Spring提供对AspectJ框架的整合-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <!--这个包是AOP联盟的API包，里面包含了针对面向切面的接口，通常Spring等其它具备动态织入功能的框架依赖此包-->
        <dependency>
            <groupId>aopalliance</groupId>
            <artifactId>aopalliance</artifactId>
            <version>${aopalliance-version}</version>
        </dependency>
        <!--JDBC支持包，包括数据源设置和JDBC访问支持-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/cglib/cglib-nodep -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib-nodep</artifactId>
            <version>3.3.0</version>
        </dependency>
        <!--对于单元测试和集成测试的简单封装-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>

        <!--SpringMVC相关-->
        <!--SpringMVC支持web端应用部署架构 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <!--REST Web服务和Web应用的视图控制器的实现-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring-version}</version>
        </dependency>

        <!--Mybatis相关-->
        <!--mybatis自己的jar-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis-version}</version>
        </dependency>
        <!--mybatis和spring整合的jar-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis-spring-version}</version>
        </dependency>
        <!--mybatis的pagehelper分页插件-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>${pagehelper-version}</version>
        </dependency>

        <!--日志相关-->
        <!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.25</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.logback-extensions/logback-ext-spring -->
        <dependency>
            <groupId>org.logback-extensions</groupId>
            <artifactId>logback-ext-spring</artifactId>
            <version>0.1.4</version>
        </dependency>

        <!--db相关-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql-version}</version>
        </dependency>
        <!--druid数据库连接池-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid-version}</version>
        </dependency>

        <!--apache提供的commons工具包-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.9</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.10</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>4.4</version>
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.4</version>
        </dependency>

        <!--Jackson相关，用于操作JSON-->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>${jackson-mapper-version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson-databind-version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson-core-version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson-annotations-version}</version>
        </dependency>

        <!--alibaba的fastjson，也用于操作JSON，和jackson具体用哪个看个人喜好-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.62</version>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>19.0</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok-veresion}</version>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <!-- 本地开发环境 -->
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
                <deploy.type>dev</deploy.type>
            </properties>
            <!-- 默认是本地开发环境 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <!-- 测试环境 -->
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
                <deploy.type>test</deploy.type>
            </properties>
        </profile>
        <profile>
            <!-- 生产环境 -->
            <id>prod</id>
            <properties>
                <profiles.active>prod</profiles.active>
                <deploy.type>prod</deploy.type>
            </properties>
        </profile>
    </profiles>

    <build>
        <!-- maven模块化的话最好从父类继成取，打成包的命名 -->
        <finalName>${project.artifactId}-${deploy.type}-${project.version}</finalName>
        <!--
            使用指定的filter进行过滤，配合profiles实现Maven多环境配置
            在执行mvn命令的时候带上-Pprod就代表生产环境，就会加载生产环境的properties，-Pdev就代表开发环境（默认）
        -->
        <filters>
            <filter>src/main/resources/env/${deploy.type}/app.properties</filter>
            <filter>src/main/resources/env/${deploy.type}/jdbc.properties</filter>
        </filters>
        <!-- 配置需要被替换的资源文件路径, jdbc.properties -->
        <resources>
            <!--1.properties配置文件资源设置-->
            <resource>
                <!--
                    资源文件位置src/main/resources/,这下面的资源文件的${}会全部被替换成filter中的标签内容。
                    directory指定的value会作为classes的资源跟目录，
                    比如指定:src/main/resources/，则classes下会出现jdbc等包，
                    而如果指定:src/main/resources/jdbc/，则classes下直接出现jdbc包下的文件，不会额外出现jdbc等其他包结构。因为他把jdbc作为了根目录
                -->
                <directory>src/main/resources/</directory>
                <!-- 在某个resource中如果设置filtering为true，将会根据输入参数动态修改相关内容 -->
                <filtering>true</filtering>
                <!-- 排除标签 -->
                <excludes>
                    <!--
                        exclude可以排除指定文件，支持通配符 ,匹配项不会生成到classes目录下，路径是以directory开始的
                        在这里就是directory（src/main/resources/）/env/下所有的文件
                        注意：可以配置多个<exclude>（如果有必要的话）
                    -->
                    <exclude>env/**</exclude>
                </excludes>
                <!-- 包含标签 -->
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <!--2.xml配置文件资源设置-->
            <resource>
                <directory>src/main/resources/</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
    </build>
</project>
