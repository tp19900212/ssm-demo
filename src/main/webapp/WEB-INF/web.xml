<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"
         metadata-complete="true">

    <display-name>Archetype Created Web Application</display-name>

    <!-- Spring的监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- Spring配置文件定义 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:config/applicationContext*.xml,
        </param-value>
        <!-- param-value可以为多个，如果为多个则用,隔开，例如下面： -->
        <!--<param-value>
          classpath*:config/applicationContext*.xml,
          classpath:config/thread-pool.xml
        </param-value>-->
    </context-param>

    <!--全局中文乱码过滤器-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--filter培训测试demo-->
    <!--<filter>
        <filter-name>demoFilter</filter-name>
        <filter-class>com.tp.filters.DemoFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>demoFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->

    <!-- SpringMvc的前端控制器 -->
    <servlet>
        <servlet-name>SpringMvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:config/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>SpringMvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--使得容器的默认servlet来响应对静态资源的请求,让defaultServlet先拦截,这样的配置性能应该是最高的，容器直接响应了客户端的请求，
      不需要再通过SpringMVC的框架了，缺点是，你的静态资源不能放在WEB-INF目录下了，必须和它处于同一级别-->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.ico</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.ttf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.woff</url-pattern>
    </servlet-mapping>

    <!-- 注册针对ServletContext对象进行监听的监听器 -->
    <!--<listener>
        <description>ServletContextListener监听器</description>
        &lt;!&ndash;实现了ServletContextListener接口的监听器类 &ndash;&gt;
        <listener-class>com.tp.listeners.MyServletContextListener</listener-class>
    </listener>-->

    <!--注册针对HttpSession对象进行监听的监听器-->
    <!--<listener>
        <description>HttpSessionListener监听器</description>
        <listener-class>com.tp.listeners.MyHttpSessionListener</listener-class>
    </listener>-->

    <!--注册针对ServletRequest对象进行监听的监听器-->
    <!--<listener>
        <description>ServletRequestListener监听器</description>
        <listener-class>com.tp.listeners.MyServletRequestListener</listener-class>
    </listener>-->

    <!--注册针对ServletContextAttribute进行监听的监听器-->
    <!--<listener>
        <description>MyServletContextAttributeListener监听器</description>
        <listener-class>com.tp.listeners.MyServletContextAttributeListener</listener-class>
    </listener>-->

    <!-- 错误页面定义/欢迎页定义 -->
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/views/errorPage/page_500.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/views/errorPage/page_404.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/WEB-INF/views/errorPage/page_403.jsp</location>
    </error-page>
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    <!-- 配置HttpSession对象的销毁时机 -->
    <session-config>
        <!--配置HttpSession对象的10分钟之后销毁 -->
        <session-timeout>10</session-timeout>
    </session-config>
</web-app>
